function addInterceptor(t,n){const i=t.findIndex(t=>null===t),e=i>-1?i:t.push(n)-1;return()=>t[e]=null}function addEventHandler(t,n,i){const e=t[n].findIndex(t=>null===t),r=e>-1?replaceEmptyHandler(...arguments,e):t[n].push(i)-1;return()=>t[n][r]=null}function replaceEmptyHandler(t,n,i,e){return t[n][e]=i,e}module.exports=class t{constructor(){this._list={},this._interceptors=[]}on(t,n){if(!t||"string"!=typeof t)throw new Error("Invalid event identifier");if(!n||"function"!=typeof n)throw new Error("Invalid handler");return"*"===t?addInterceptor(this._interceptors,n):(this._list[t]||(this._list[t]=[]),addEventHandler(this._list,t,n))}one(t,n){if(!n||"function"!=typeof n)throw new Error("Invalid handler");const i=this.on(t,t=>{n.apply(null,[...arguments]),i()});return i}emit(t,n){if(!t||"string"!=typeof t)throw new Error("Invalid event identifier");this._list[t]&&[...this._interceptors,...this._list[t]].forEach(t=>!!t&&t(n))}listHandlers(t){const n=this._list[t];if(n)return this._list[t].filter(t=>!!t)}remove(t){delete this._list[t]}get interceptors(){return this._interceptors.map(t=>({interceptor:t}))}get events(){return Object.keys(this._list).map(t=>({eventId:t,handlers:this.listHandlers(t)}))}get all(){return[...this.interceptors,...this.events]}};